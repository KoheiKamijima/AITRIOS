import Head from "next/head";
import Image from "next/image";
import PolygonRenderer from "@/components/PolygonRenderer";
import CrowRender from "@/components/CrowRender";
import { useState, useEffect, useRef } from "react";
import useSound from "use-sound";
import React from "react";
import styles from "@/styles/Home.module.css";
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export default function Home() {
  const [play, { stop, pause }] = useSound("/warning.mp3");
  const [data, setData] = useState([]);
  const fetchData = async () => {
    const res = await fetch(`/api/data`);
    const newData = await res.json();
    setData(newData);
  };

  useEffect(() => {
    fetchData();
    const intervalId = setInterval(fetchData, process.env.NEXT_PUBLIC_FETCH_INTERVAL);

    return () => {
      clearInterval(intervalId);
    };
  }, []);

  var chartColors = {
    red: 'rgb(255, 99, 132)',
    orange: 'rgb(255, 159, 64)',
    yellow: 'rgb(255, 205, 86)',
    green: 'rgb(75, 192, 192)',
    blue: 'rgb(54, 162, 235)',
    purple: 'rgb(153, 102, 255)',
    grey: 'rgb(201, 203, 207)'
  };
 

  const c_data = {
    labels: [],
    datasets:[
      {
        backgroundColor: "rgba(255, 99, 132, 0.5)",
        borderColor: 'rgba(35,200,153,1)',
        data: [100,120,50,110],
        lineTension: 0,
      }
    ]
  }


  const options = {
        legend:{
          display:false,
        },
        scales: {
          xAxes: [{
            type: 'realtime',
            realtime: {
            delay:2000,
            onRefsh:function(chart){
                chart.data.datasets.forEach(function(data){
                  dataset.data.push({
                    x: Date.now(),
                    y: Math.random()
                  });
                });
              }
            }
          }]
        }
  }
       

  

  useEffect(() => {
    if(c_data){
      c_data.datasets.push(1);}
  }, [data]);

  const geojson = {
    type: "FeatureCollection",
    features: [
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: [0.0, 0.0, 0.0],
        },
        properties: {
          device_id: "sid-100A50500A2001008164012000000000",
          type_id: 0,
          class_id: null,
          timestamp: null,
        },
      },
      {
        type: "Feature",
        geometry: {
          type: "Point",
          coordinates: [10.0, 0.0, 0.0],
        },
        properties: {
          device_id: "sid-100A50500A2011085864012000000000",
          type_id: 0,
          class_id: null,
          timestamp: null,
        },
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [0.0, 0.0],
            [23.293134615353335, 4.991136632108562],
            [18.431666401053945, 9.852604846407955],
            [0.0, 0.0],
          ],
        },
        properties: {
          device_id: "sid-100A50500A2001008164012000000000",
          type_id: 1,
          class_id: 0,
          timestamp: "20230621075334854",
        },
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [10.0, 0.0],
            [5.008863367891438, 23.293134615353335],
            [0.14739515359204525, 18.431666401053945],
            [10.0, 0.0],
          ],
        },
        properties: {
          device_id: "sid-100A50500A2011085864012000000000",
          type_id: 1,
          class_id: 0,
          timestamp: "20230621075334854",
        },
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [9.561017548183196, 2.048687122321259],
            [8.972309733141893, 1.9225417498850184],
            [7.777614715214325, 4.157506042548204],
            [8.972309733141891, 4.7961275142855335],
            [9.561017548183196, 2.048687122321259],
          ],
        },
        properties: {
          device_id: null,
          type_id: 2,
          class_id: 0,
          timestamp: "20230621075334854",
        },
      },
    ],
  };

 

  return (
    <>
   
      <Head>
        <title>カラス！</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <title>Map Search</title>
     <meta charset="utf-8" />
      </Head>
  
      <nav className={styles.nav}>
      <ul>
        <p>カラスマップ&nbsp;</p>
      </ul>
      </nav>
  
      <CrowRender data_crow={data} />
      <div className={styles.map2}>
      <PolygonRenderer data={data} scale={50} />
      </div>
      <div>
      <Line data={c_data}/>
      </div>
    
    </>
  );
}
