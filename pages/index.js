import Head from "next/head";
import Image from "next/image";
import PolygonRenderer from "@/components/PolygonRenderer";
import ChartRender from "@/components/ChartRender";
import CrowRender from "@/components/CrowRender";
import { useState, useEffect, useRef } from "react";
import useSound from "use-sound";
import React from "react";
import styles from "@/styles/Home.module.css";

import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);


export default function Home() {
  const [play, { stop, pause }] = useSound("/warning.mp3");
  const [dataArr, setData] = useState([]);
  const [Button, setButton] = useState(false);
  const fetchData = async () => {
    const res = await fetch(`/api/data`);
    const newData = await res.json();
    setData(newData);
    console.log(newData);
  };

  useEffect(() => {
    fetchData();
    const intervalId = setInterval(fetchData, process.env.NEXT_PUBLIC_FETCH_INTERVAL);

    return () => {
      clearInterval(intervalId);
    };
  }, []);

  const onSubmit = async () => {
    setButton(true);
   

  }


  // 最新のDeviceIDを追跡する
  let encounteredDeviceIDs = [];

  return (
    <>
      <Head>
        <title>カラス！</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <title>Map Search</title>
        <meta charset="utf-8" />
      </Head>

      <nav className={styles.nav}>
        <ul>
          <p>カラスマップ&nbsp;</p>
        </ul>
      </nav>

      <CrowRender data_crow={dataArr[0]} button_state={Button} />
      <div className={Button ? styles.map2 : styles.map2_hide}>
        {dataArr.map((data, index) => {
          let alpha;

          // まだ出会っていないDeviceIDの場合
          if (!encounteredDeviceIDs.includes(data.DeviceID)) {
            alpha = 0.3;
            // 出会ったDeviceIDを記録
            encounteredDeviceIDs.push(data.DeviceID);
          } else {
            alpha = 0.01;
          }

          return <PolygonRenderer data={data} scale={50} alpha={alpha} index={index} key={index} />;
        })}
      </div>

      <div className={Button ? styles.map3 : styles.map3_hide}>
      <ChartRender data_crow={dataArr[0]} />
      </div>
      <div className={Button ? styles.circle : styles.circle_hide}>
      <Image
            src="/circle.svg"
            width={300}
            height={300}
          />
      </div>
      <div className={Button ? styles.map2_description : styles.map2_description_hide}>
          <p>現場の様子</p>
      </div>
      <div className={Button ? styles.map3_description : styles.map3_description_hide}>
          <p>履歴</p>
        
      </div>
          <div className={styles.button}>
        <p>
        <button type="submit" onClick={onSubmit} style={{ height: "50px", width: "200px" }} >地点１取得</button>
        </p>
        <p>
        <button type="submit" onClick={onSubmit} style={{ height: "50px", width: "200px" }} >地点２取得</button>
        </p>
        <p>
        <button type="submit" onClick={onSubmit} style={{ height: "50px", width: "200px" }} >地点３取得</button>
        </p>
        <p>
        <button type="submit" onClick={onSubmit} style={{ height: "50px", width: "200px" }} >地点４取得</button>
        </p>
      </div>
      

    </>
  );
}
